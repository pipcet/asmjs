#{#define _GNU_SOURCE}
#{#include <stdio.h>}
#{#include <sys/stat.h>}
#{#include <fcntl.h>}
#{#include <sys/fcntl.h>}
#{#include <unistd.h>}
#{#include <sys/types.h>}
#{#include <errno.h>}
#{#include <sys/ioctl.h>}
#{#include <sys/poll.h>}
#{#include "zeropage.h"}
#{#include "js3.h"}
#{#define AT_FDROOTD -101}

#{Heap thisheap("this.HEAP");}
#{Context context(&thisheap);}

#{JSV<zeropage*> zp("4096", "HEAP");}
#{JSV<threadpage*> tp1("8192", "HEAP");}

var global = this;

/* process -> vm
 *         -> thread
 */

/* A link-map object. */
function Wasm32LM(vm)
{
    this.vm = vm;

    this.def = {};
    this.defun = {};
    this.ref = {};
    this.refun = {};
    this.copy = {};
    this.dep = {};
    this.lazy = {};
}

Wasm32LM.prototype.open_dyninfo = function (dyninfo, imports, module)
{
    var vm = this.vm;

    for (let [addr1, addr2] of dyninfo.fixup) {
        addr1 = addr1 - 0x4000 + imports.sys.got;
        addr2 = addr2 - 0x4000 + imports.sys.got;

        vm.HEAPU32[addr1>>2] = addr2;
    }

    for (let [addr1, addr2] of dyninfo.fixupfun) {
        addr1 = addr1 - 0x4000 + imports.sys.got;
        addr2 = addr2 + imports.sys.plt;

        vm.HEAPU32[addr1>>2] = addr2;
    }

    for (let [symbol, addr] of dyninfo.def) {
        addr = addr - 0x4000 + imports.sys.got;
        if (this.copy[symbol]) {
            for (let [addr2, size] of this.copy[symbol]) {
                for (let i = 0; i < size; i++) {
                    vm.HEAPU8[addr2+i] = vm.HEAPU8[addr+i];
                }
                module.symtab[symbol] = addr2;
            }

            //delete this.copy[symbol];

            //continue;
        }
        module.symtab[symbol] = addr;
        if ((symbol in this.def ||
             symbol in this.defun) &&
            !symbol.match(/^__(start|stop)_/)) {
            //continue;
        }
        this.def[symbol] = addr;

        if (this.ref[symbol]) {
            let ref = this.ref[symbol];
            //delete this.ref[symbol];

            for (let [addr2, module] of ref) {
                vm.HEAPU32[addr2>>2] = addr;
                module.symtab[symbol] = addr;
            }
        }
    }
    for (let [symbol, addr] of dyninfo.defun) {
        if (symbol in this.def ||
            symbol in this.defun) {
            continue;
        }
        addr += imports.sys.plt;
        this.defun[symbol] = addr;
        module.symtab[symbol] = addr;

        if (this.ref[symbol]) {
            let ref = this.ref[symbol];
            delete this.ref[symbol];

            for (let [addr2, module] of ref) {
                vm.HEAPU32[addr2>>2] = addr;
            }
        }

        if (this.refun[symbol]) {
            let ref = this.refun[symbol];
            delete this.refun[symbol];

            for (let [addr2, module] of ref) {
                //console.log("setting " + addr2 + " to " + vm.table.get(addr));
                vm.tableset(addr2, addr);
                module.symtab[symbol] = addr;
            }
        }
    }
    for (let [symbol, addr] of dyninfo.ref) {
        addr -= 0x4000;
        addr += imports.sys.got;
        if (symbol in this.def) {
            vm.HEAPU32[addr>>2] = this.def[symbol];
        } else if (symbol in this.defun) {
            vm.HEAPU32[addr>>2] = this.defun[symbol];
        } else {
            if (!this.ref[symbol])
                this.ref[symbol] = [];
            this.ref[symbol].push([addr, module]);
        }
    }
    for (let [symbol, index] of dyninfo.refun) {
        symbol = symbol.replace(/@@.*/, "");
        symbol = symbol.replace(/@.*/, "");
        if (symbol in this.defun) {
            //console.log("setting " + (index + imports.sys.plt) + " to " + vm.table.get(this.defun[symbol]));
            vm.tableset(index + imports.sys.plt, this.defun[symbol]);
        } else {
            if (!this.refun[symbol])
                this.refun[symbol] = [];
            this.refun[symbol].push([index + imports.sys.plt, module]);
            //vm.tableset(index + imports.sys.plt, 0);
        }
    }

    for (let [symbol, addr, size] of dyninfo.copy) {
	addr -= 0x4000;
	addr += imports.sys.got;
        if (!this.copy[symbol])
            this.copy[symbol] = [];

        this.copy[symbol].push([addr, size]);
    }

    for (let [symbol, addr] of dyninfo.def) {
        addr = addr - 0x4000 + imports.sys.got;
        if (this.copy[symbol]) {
            for (let [addr2, size] of this.copy[symbol]) {
                for (let i = 0; i < size; i++) {
                    vm.HEAPU8[addr2+i] = vm.HEAPU8[addr+i];
                }
                module.symtab[symbol] = addr2;
            }

            //delete this.copy[symbol];

            //continue;
        }
        module.symtab[symbol] = addr;
        if ((symbol in this.def ||
             symbol in this.defun) &&
            !symbol.match(/^__(start|stop)_/)) {
            //continue;
        }
        this.def[symbol] = addr;

        if (this.ref[symbol]) {
            let ref = this.ref[symbol];
            //delete this.ref[symbol];

            for (let [addr2, module] of ref) {
                vm.HEAPU32[addr2>>2] = addr;
                module.symtab[symbol] = addr;
            }
        }
    }

    for (let lib of dyninfo.libs) {
        this.dep[lib] = -1;
    }

    if ("lazy" in dyninfo) {
        for (let [symbol, addr, version] of dyninfo.lazy) {
            if (version === "libc.so") {
                console.log("libc can't be lazy!");
                continue;
            }
            if (version === undefined)
                continue;
            console.log("forwarding " + (addr + imports.sys.plt - 1) + " to " + vm.table.get(addr + imports.sys.plt) + " version " + version);
            vm.tableset(addr + imports.sys.plt - 1, addr + imports.sys.plt);
            version = version.replace(/\.so$/, ".wasm");
            this.lazy[addr+imports.sys.plt] = version;
            delete this.dep[version];
        }
    }
};

/* A virtual memory object. */
function Wasm32VM(sizes)
{
    this.table = new WebAssembly.Table({element:"anyfunc",initial:sizes.tablesize,maximum:sizes.tablesize});
    this.table_length = 0;
    this.shadowtable = {};
    this.sizes = sizes;
    this.memory = new WebAssembly.Memory({initial: 1, maximum: 65535});

    this.memory.grow(this.sizes.memsize / 65536 - 1);

    this.heap = this.memory.buffer;
    this.HEAP8 = new Int8Array(this.memory.buffer);
    this.HEAP16 = new Int16Array(this.memory.buffer);
    this.HEAP32 = new Int32Array(this.memory.buffer);
    this.HEAPU8 = new Uint8Array(this.memory.buffer);
    this.HEAPU16 = new Uint16Array(this.memory.buffer);
    this.HEAPU32 = new Uint32Array(this.memory.buffer);
    this.HEAPF32 = new Float32Array(this.memory.buffer);
    this.HEAPF64 = new Float64Array(this.memory.buffer);

    this.base_lm = new Wasm32LM(this);

    this.space_functions = new RangeAllocator(this.grow_functions.bind(this));
    this.space_pcs = new RangeAllocator(this.grow_pcs.bind(this));
}

Wasm32VM.prototype.clonedesc = function ()
{
    this.%{zp[&zeropage::top_of_sbrk]} += 64 * 1024 * 1024;
    return {
        sizes: this.sizes,
        table: this.shadowtable,
        table_length: this.table_length,
        memory: this.memory.buffer.slice(0, this.%{zp[&zeropage::top_of_sbrk]}),
        stack: this.memory.buffer.slice(this.sizes.stackbottom, this.sizes.stacksize),

        space_functions: this.space_functions.clonedesc(),
        space_pcs: this.space_pcs.clonedesc()
    };
};

Wasm32VM.prototype.alive = function (clonedesc)
{
    var HEAPU32 = new Uint32Array(clonedesc.memory);
    var HEAP32 = new Int32Array(clonedesc.memory);
    var end = %{zp[&zeropage::top_of_sbrk]}/4;
    for (var i = 0; i < end; i++)
        this.HEAPU32[i] = HEAPU32[i];
    HEAPU32 = new Uint32Array(clonedesc.stack);
    var size = clonedesc.sizes.stacksize / 4;
    for (var i = 0; i < size; i++)
        this.HEAPU32[clonedesc.sizes.stackbottom + i] = HEAPU32[i];

    this.table_length = clonedesc.table_length;
    this.shadowtable = clonedesc.table;

    for (var x in clonedesc.table)
        this.table.set(x, this.table.get(clonedesc.table[x]));
};

Wasm32VM.prototype.tableset = function (x, y)
{
    if (!(y in this.shadowtable))
        this.shadowtable[y] = y;

    this.shadowtable[x] = this.shadowtable[y];

    this.table.set(x, this.table.get(y));
};

Wasm32VM.prototype.grow_functions = function (limit)
{
};

Wasm32VM.prototype.grow_pcs = function (limit)
{
};

var Wasm32ModuleIndex = 1;
var Wasm32Modules = {};

function Wasm32Module(process, bytes)
{
    this.bytes = bytes;
    this.ctime = Date.now();
    this.index = Wasm32ModuleIndex++;
    this.symtab = {};
    Wasm32Modules[this.index] = this;

    process.modules.push(this);
}

Wasm32Module.prototype.clonedesc = function ()
{
    return {
        bytes: this.bytes,
        module: this.module,
        got: this.imports.sys.got,
        gpo: this.imports.sys.gpo,
        plt: this.imports.sys.plt,
        dyninfo: this.dyninfo,
    };
};

Wasm32Module.prototype.reload_at = function (thread, vm, clonedesc)
{
    this.imports = {};
    this.imports.sys = {};

    this.imports.sys.call = thread.extcall.bind(thread);
    this.imports.sys.eh_return = thread.eh_return.bind(thread);
    this.imports.sys.indcall = thread.indcall.bind(thread);
    this.imports.sys.trace = thread.trace.bind(thread);
    this.imports.sys.truncdfsi = thread.truncdfsi.bind(thread);
    this.imports.sys.null = thread.null_called.bind(thread);
    this.imports.sys.got = clonedesc.got;
    this.imports.sys.gpo = clonedesc.gpo;
    this.imports.sys.plt = clonedesc.plt;
    this.imports.sys.table = vm.table;
    this.imports.sys.memory = vm.memory;

    return Promise.resolve().then(() => WebAssembly.instantiate(this.module, this.imports))
        .then((instance) => {
            this.instance = instance;
            this.instime = Date.now();
            thread.exports = this.instance.exports;
            thread.memory = vm.memory;
            thread.table = vm.table;
            if (this.instance.exports.entry !== undefined) {
                thread.entry = this.imports.sys.plt + this.instance.exports.entry;
            }
            return true;
    }).catch((e) => {
        console.log("died instantiating: " + e + "\n" + e.stack);
    });
};

Wasm32Module.prototype.fill_table = function (thread, vm, got, plt)
{
    var pc = 0;
    var seen = 0;
    var count = 0;
    do {
        var str = pc.toString(16);
        while (str.length < 16)
            str = str + " ";
        var f = thread.exports["f_" + str];
        if (f) {
            thread.vm.tableset(pc+plt, f);
            seen++;
        } else if (seen || count++ == 128) {
            break;
        }
        pc++;
    } while (true);
};

Wasm32Module.prototype.check_libs = function (thread)
{
    var promise = Promise.resolve(0);

    for (var lib0 in this.vm.base_lm.dep) {
        let lib = lib0;
        if (this.vm.base_lm.dep[lib] === -1) {
            promise = promise.then(() => {
                if (this.vm.base_lm.dep[lib] !== -1) {
                    return;
                }

                if (typeof os !== "undefined") {
                    var module = new Wasm32Module(thread.process, os.file.readFile(os.getenv("WASMDIR") + "/" + lib, "binary"));
                    return module.load(thread, this.vm).then(() => {
                        var mem = this.vm.%{zp[&zeropage::top_of_sbrk]};
                        var tom = (mem + module.dyninfo.data_end - 0x4000 + 4095)&-4096;
                        this.vm.%{zp[&zeropage::top_of_sbrk] = "tom"}
                        var ret = module.instantiate(thread, this.vm, mem, true);
                        this.vm.base_lm.dep[lib] = 0;

                        return ret;
                    });
                } else if (typeof fetch !== "undefined") {
                    var module;
                    return fetch(lib).then(response => {
                        if (response.ok)
                            return response.arrayBuffer();

                        return Promise.reject(response);
                    }).then((buffer) => {
                        module = new Wasm32Module(thread.process, buffer);

                        return module.load(thread, this.vm);
                    }).then(() => {
                        var mem = this.vm.%{zp[&zeropage::top_of_sbrk]};
                        var tom = (mem + module.dyninfo.data_end - 0x4000 + 4095)&-4096;
                        this.vm.%{zp[&zeropage::top_of_sbrk] = "tom"}
                        var ret = module.instantiate(thread, this.vm, mem, true);
                        this.vm.base_lm.dep[lib] = 0;

                        return ret;
                    }).catch((e) => {
                        console.log("died resolving libraries: " + lib + "\n" + e + " " + e.stack);
                    });
                }
            });
        }
    }

    return promise;
};

Wasm32Module.prototype.load = function (thread, vm)
{
    this.vm = vm;
    thread.vm = vm;

    this.modulePromise = WebAssembly.compile(this.bytes);
    return this.modulePromise.then((module) => {
        this.module = module;
        this.comtime = Date.now();
        var dyninfo;
        var cs = WebAssembly.Module.customSections(module, "dyninfo" /* + ".json" */);
        for (let c of cs) {
            let s = abtoascii(c);
            this.dyninfo = JSON.parse(s);
        }

        return this.index;
    });
};

var lastdonetime = 0;

Wasm32Module.prototype.instantiate = function (thread, vm, mem, recurse)
{
    this.imports = {};
    this.imports.sys = {};

    this.imports.sys.call = thread.extcall.bind(thread);
    this.imports.sys.eh_return = thread.eh_return.bind(thread);
    this.imports.sys.indcall = thread.indcall.bind(thread);
    this.imports.sys.trace = thread.trace.bind(thread);
    this.imports.sys.truncdfsi = thread.truncdfsi.bind(thread);
    this.imports.sys.null = thread.null_called.bind(thread);
    this.imports.sys.got = mem;
    this.imports.sys.gpo = vm.space_pcs.alloc(this.dyninfo.pc_end);
    this.imports.sys.plt = vm.space_functions.alloc(this.dyninfo.plt_end);
    this.imports.sys.table = vm.table;
    this.imports.sys.memory = vm.memory;

    return WebAssembly.instantiate(this.module, this.imports)
        .then(instance => {
            this.instance = instance;
            this.instime = Date.now();
            thread.exports = this.instance.exports;
            thread.memory = vm.memory;
            thread.table = vm.table;
            if (this.instance.exports.entry !== undefined) {
                thread.entry = this.imports.sys.plt + this.instance.exports.entry;
            }
            this.fill_table(thread, vm, this.imports.sys.got, this.imports.sys.plt);
            this.vm.base_lm.open_dyninfo(this.dyninfo, this.imports, this);
            lastdonetime = this.donetime = Date.now();

	    this.instance = instance;
            if (recurse)
                return this.check_libs(thread);
            else
                return true;
    }).catch((e) => {
        console.log("died instantiating: " + e + "\n" + e.stack);
    });
};

function Wasm32Thread(kport, process, threadpage)
{
    if (kport)
        this.kport = new RRPort(kport);
    if (this.kport)
        this.kport.port.start();
    this.process = process;
    process.threads.push(this);
    var system = process.system;

    this.fds = process.fds;

    this.system = system;
    system.threads.push(this);

    var sizes = {
        tablesize: 65536,
        memsize: 512 * 1024 * 1024,
        stacksize: 1 * 1024 * 1024,
        stackbottom: 511 * 1024 * 1024,
    };
    let vm = new Wasm32VM(sizes);

    this.vm = vm;
    this.HEAP8 = vm.HEAP8;
    this.HEAP16 = vm.HEAP16;
    this.HEAP32 = vm.HEAP32;
    this.HEAPU8 = vm.HEAPU8;
    this.HEAPU16 = vm.HEAPU16;
    this.HEAPU32 = vm.HEAPU32;
    this.HEAPF32 = vm.HEAPF32;
    this.HEAPF64 = vm.HEAPF64;

    this.threadpage = threadpage;

    this.extcallRet = {};
    this.exports = {};
    this.types = {};
    this.types_by_id = {};
    this.vars = {};
    this.queue = [];

    var thread = this;

    this.types_by_id["Kc"] = this.types["string"] = {
        constructor: function (thread, ptr) {
            if (ptr === 0)
                return null;

            var str = CStringAt(thread.HEAP8, ptr);

            this.thread = thread;
            this.address = ptr;
            this.str = str;

            this.toString = function () {
                return this.str;
            };

            var ret = new String(this.str);

            ret.address = ptr;

            return ret;
        },
        construct: function (thread, ptr) {
            if (ptr === 0)
                return null;

            return new this.constructor(thread, ptr);
        },
    };

    if (this.kport)
        this.kport.port.start();
}

Wasm32Thread.prototype.find_type = function (typeid)
{
    typeid = typeid.replace(/^P/, "");

    if (typeid in this.types_by_id)
        return this.types_by_id[typeid];
    else if (typeid.match(/^P/))
        return new ThinThin.TypePtr(typeid, typeid);
    else
        switch (typeid) {
        case "i":
            return this.types_by_id[typeid] = new ThinThin.Type32(typeid);

        case "m":
            return this.types_by_id[typeid] = new ThinThin.TypeU32(typeid);

        default:
            return new ThinThin.TypeOpaque(typeid);
    }
};

#{JSV<threadpage*> tp("this.threadpage");}

Wasm32Thread.prototype.stopped = function ()
{
    return %{tp[&threadpage::stop_reason]};
};

Wasm32Thread.prototype.pc = function ()
{
    return %{tp[&threadpage::pc]};
};

Wasm32Thread.prototype.pc0 = function ()
{
    return %{tp[&threadpage::pc]};
};

Wasm32Thread.prototype.dpc = function ()
{
    return %{tp[&threadpage::pc]};
};

Wasm32Thread.prototype.sp = function ()
{
    return %{tp[&threadpage::sp]};
};

Wasm32Thread.prototype.initsp = function ()
{
    return %{tp[&threadpage::initsp]};
};

var run;

Wasm32Thread.prototype.stop = function (reason)
{
    var stopped = this.stopped();
    %{tp[&threadpage::stop_reason]} = reason;

    if (stopped && reason == 0) {
        this.system.runqueue.push(this);
        if (run)
            run();
    }
};

Wasm32Thread.prototype.set_rv = function (rv)
{
    //%XXX{tp[&threadpage::rv]} = rv;
    this.HEAPU32[8192 + 12 * 8>>2] = rv;
};

Wasm32Thread.prototype.set_pc = function (pc)
{
    %{tp[&threadpage::pc]} = pc;
};

Wasm32Thread.prototype.set_sp = function (sp)
{
    %{tp[&threadpage::sp]} = sp;
};

Wasm32Thread.prototype.set_initsp = function (initsp)
{
    %{tp[&threadpage::initsp]} = initsp;
};

Wasm32Thread.prototype.errorToCode = function (e)
{
    if (typeof e === "number" && e <= 0)
        return e;

    return -%{EIO};
};

Wasm32Thread.prototype.extcall = function (a, pc, sp1, b, c, d)
{
    var sp = sp1 - 56 - 16 + 16;
    this.syscall_sp = sp;
    var modstr = b;
    var funstr = c;
    var mod = CStringAt(this.HEAPU8, modstr);
    var fun = CStringAt(this.HEAPU8, funstr);

    //console.log("mod " + mod + " fun " + fun + "("+modstr+"/"+funstr+")");

    if (sp in this.extcallRet) {
        var ret = this.extcallRet[sp];

        if (ret !== undefined) {
            if (typeof Promise !== undefined &&
                ret instanceof Promise) {
                this.stop(1);
                return sp|1;
            }

            this.set_rv(ret);

            delete this.extcallRet[sp];

            return sp;
        }
    }

    var nargs = this.HEAP32[sp1+8>>2];
    if (nargs == -1)
        nargs = 7;
    var is_void = ((nargs & 0x40000000) != 0) !=
        ((nargs & 0x80000000) != 0);
    var is_void_2 = this.HEAP32[sp1>>2] != 0;

    if (is_void)
        nargs ^= 0x40000000;

    var args = [];
    if (nargs >= 0) {
        for (var ai = 0; ai < nargs; ai++) {
            args[ai] = this.HEAP32[sp1+16+4*ai>>2];
        }
    }

    switch (mod) {
    case "thinthin":
        if (ThinThin[fun]) {
            try {
                retv = ThinThin[fun].apply(this, args);
                break;
            } catch (e) {
                retv = this.errorToCode(e);
                break;
            }
        }
        throw "couldn't find " + fun;
    default:
        i.dont.exist++;
        throw("giving up, pc " + pc.toString(16) + " fun " + funstr.toString(16) + " " + fun + " mod " + modstr.toString(16) + " " + mod);
    }

    if (typeof Promise !== "undefined" &&
        retv instanceof Promise) {
        this.extcallRet[sp] = retv;
        this.stop(1);

        retv.then(r => {
            this.extcallRet[sp] = r;
            this.stop(0);
        }).catch(e => {
            this.extcallRet[sp] = this.errorToCode(e);
            this.stop(0);
        });

        return sp|1;
    }

    if (retv !== undefined && retv === retv) {
        this.set_rv(retv);
    } else if (retv !== retv) {
        this.stop(1);
        return sp|1;
    } else {
        throw "cannot resolve " + mod + ":" + fun;
    }

    return sp;
};

Wasm32Thread.prototype.restart = function (dst, src, len, entry)
{
    var initsp = this.initsp();

    this.restartCode = () => {
        if (len) {
            var i;

            for (i = 0; i < len; i++)
                this.HEAP8[dst+i] = this.HEAP8[src+i];
        } else {
            //datainit();
        }

        this.set_pc(entry>>4);
        this.set_sp(initsp+16);
        this.set_initsp(initsp);

        delete this.restartCode;
    };

    this.stop(0);

    return 0;
};

Wasm32Thread.prototype.step = function ()
{
    var first = this.first;
    if (first === undefined)
        first = true;
    var dpc = this.%{tp1[&threadpage::initsp]};
    var pc0 = this.%{tp1[&threadpage::pc]};
    var sp = this.%{tp1[&threadpage::sp]};
    var rpc = 0;
    var ret;

    while (true) {
        if (first) {
            ret = system.threads[0].indcall(-1, sp+16, 0, 0, rpc, this.entry);
            first = this.first = false;
        } else {
            ret = system.threads[0].indcall(dpc, sp+16, 0, 0, rpc, pc0);
        }

        if (ret & 3) {
            sp = ret;
            sp &= -4;
            pc0 = system.threads[0].HEAPU32[sp+8>>2];
            dpc = 0;
            break;
        } else {
            sp = ret; //system.threads[0].HEAPU32[ret+16>>2];
            sp = system.threads[0].HEAPU32[ret>>2];
            pc0 = system.threads[0].HEAPU32[sp+8>>2];
            dpc = 0; //system.threads[0].HEAPU32[sp+28>>2];
        }
    }

    this.%{tp1[&threadpage::pc]} = pc0;
    this.%{tp1[&threadpage::initsp]} = dpc;
    this.%{tp1[&threadpage::sp]} = sp;

    return ret&-4;
};

Wasm32Thread.prototype.trace = function (off, pc0, dpc, a0, a1, a2)
{
    console.log("trace off " + off + " sp " + pc0 + " fp " + dpc +
                a0 + " " + a1 + " " + a2);

    var start = new Date();

    while ((new Date()) - start < 100);
    return 0;
};

Wasm32Thread.prototype.truncdfsi = function (v)
{
    return v;
};

Wasm32Thread.prototype.null_called = function ()
{
    console.log("NULL called!");
    while (1);
    throw "NULL called!";
};

function build_sig(sigstr)
{
    var ret = [];
    ret.push(1); // 1 signature;
    ret.push(0x60); // signature;
    ret.push(sigstr.length - 3);
    for (var i = 2; i < sigstr.length && sigstr[i] !== 'E'; i++) {
        switch (sigstr[i]) {
        case 'i':
            ret.push(0x7f);
            break;
        case 'l':
            ret.push(0x7e);
            break;
        case 'f':
            ret.push(0x7d);
            break;
        case 'd':
            ret.push(0x7c);
            break;
        }
    }

    if (sigstr[1] == 'v') {
        ret.push(0x00); 
    } else {
        ret.push(0x01); 
        switch (sigstr[1]) {
        case 'i':
            ret.push(0x7f);
            break;
        case 'l':
            ret.push(0x7e);
            break;
        case 'f':
            ret.push(0x7d);
            break;
        case 'd':
            ret.push(0x7c);
            break;
        }
    }

    return ret;
}

Wasm32Thread.prototype.indcall = function (mbz, sp, r0, r1, rpc, pc)
{
    return this.vm.table.get(pc)(mbz, sp, r0, r1, rpc, pc);
};

Wasm32Thread.prototype.set_arg = function (index, arg)
{
    this.HEAP32[8296 + index * 8 >> 2] = arg;
};

/* This is somewhat tricky. The dwarf expressions we want to generate are:
 *   DW_CFA_offset_extended_sf: r36 at cfa+8
 *   DW_CFA_expression: r0 (DW_OP_breg2 (r2): 0; DW_OP_breg2 (r2): 0; DW_OP_deref; DW_OP_breg2 (r2): 0; DW_OP_minus; DW_OP_plus)
 *   DW_CFA_def_cfa_register: r0
 *
 * (I have to try again to make the second expression less redundant).
 * The point is that the stack pointer is implicitly set to the CFA,
 * so we work around gcc's apparent inability to generate a
 * DW_OP_call_frame_cfa opcode or use the CFA argument pushed onto the
 * stack by CFA expressions.
 */

Wasm32Thread.prototype.eh_return = function (fp, sp, handler)
{
    var a0 = this.HEAP32[fp+48>>2]|0;
    var a1 = this.HEAP32[fp+56>>2]|0;
    var a2 = this.HEAP32[fp+64>>2]|0;
    var a3 = this.HEAP32[fp+72>>2]|0;

    this.set_arg(0, a0);
    this.set_arg(1, a1);
    this.set_arg(2, a2);
    this.set_arg(3, a3);

    fp = this.HEAP32[this.HEAP32[fp>>2]>>2]|0;

    this.HEAP32[fp+16>>2] = handler - this.HEAP32[fp+28>>2];

    fp |= 3;

    return fp;
};

Wasm32Thread.prototype.to_address = function (x)
{
    if (x === null)
        return 0;

    if (typeof x === "number")
        return x;

    if ("address" in x)
        return x.address;

    throw "cannot convert " + x + " to address";
};

Wasm32Thread.prototype.from_address = function (type, addr)
{
    if (addr === 0)
        return null;

    var t = this.types_by_id[type];

    return new t.constructor(this, address);
};

Wasm32Thread.prototype.freeze = function ()
{
    return new FrozenWasm32Thread(this);
};

function Wasm32Process(system, fds)
{
    this.system = system;
    system.processes.push(this);

    this.fds = fds ? fds : [];
    this.ddroot = system.ddroot = new SparseDD(new ThinThinFetchDD(this, undefined, ".", undefined, undefined));
    this.ddcwd = system.ddroot;

    system.ddroot.open();

    this.functions = {};
    this.threads = [];
    this.modules = [];
}

Wasm32Process.prototype.clonedesc = function ()
{
    return {
        modules: this.modules.map(x => x.clonedesc()),
        fds: this.fds.map(x => x.clonedesc()),
    };
};

Wasm32Process.prototype.deffun = function(page, fo)
{
    this.functions[page] = fo;

    if (fo.name == "__pre_main") {
        this.entry = fo.pc0;
        premain_pc = fo.pc0;
    } else if (fo.name == "_start") {
        if (this.entry === undefined)
            this.entry = fo.pc0;
        main_pc = fo.pc0;
    } else if (fo.name == "gdbstub_entry") {
        gdbstub_pc = fo.pc0;
    }
};

Wasm32Process.prototype.freeze = function ()
{
    return new FrozenWasm32Process(this);
};

function FrozenWasm32Process(process)
{
    this.fds = process.fds;
    this.threads = process.threads;
    this.system = process.system;
    this.functions = process.functions;
    this.heap = process.heap;

    for (var i = 0; i < this.threads.length; i++)
        this.threads[i] = this.threads[i].freeze();

    var fds = [];
    for (var i = 0; i < this.fds.length; i++)
        fds[i] = this.fds[i].freeze();

    this.fds = fds;

    delete this.system;
    delete this.functions;
}

FrozenWasm32Process.prototype.thaw = function (system)
{
    var n = new Wasm32Process(system, this.heap);

    var fds = [];
    for (var i = 0; i < this.fds.length; i++) {
        var fd = this.fds[i];
        fds[i] = FrozenThinThinFD.prototype.thaw.call(fd,
                                                      n,
                                                      function (x) { return global.postMessage(x) });
    }
    n.fds = fds;

    n.threads = [];
    n.system = system;
    n.functions = {};
    n.heap = new ArrayBuffer(this.heap.byteLength);
    var newHEAP8 = new Int8Array(n.heap);
    var oldHEAP8 = new Int8Array(this.heap);
    for (var i = 0; i < this.heap.byteLength; i++)
        newHEAP8[i] = oldHEAP8[i];

    n.newHEAP8 = newHEAP8;
    n.oldHEAP8 = oldHEAP8;

    n.HEAP8 = new Int8Array(n.heap);
    n.HEAP16 = new Int16Array(n.heap);
    n.HEAP32 = new Int32Array(n.heap);
    n.HEAPU8 = new Uint8Array(n.heap);
    n.HEAPU16 = new Uint16Array(n.heap);
    n.HEAPU32 = new Uint32Array(n.heap);
    n.HEAPF32 = new Float32Array(n.heap);
    n.HEAPF64 = new Float64Array(n.heap);

    for (var i = 0; i < this.threads.length; i++)
        n.threads[i] = FrozenWasm32Thread.prototype.thaw.call(this.threads[i],
                                                              n,
                                                              gMod);

    return n;
};

/* The kernel: code that must run once only, even from workers. */
function Wasm32Kernel()
{
    this.space_pids = new RangeAllocator(() => {});
    this.space_pids.alloc(2);
    this.ports_by_pid = {};
    this.pids_by_port = new WeakMap();
    this.ppids = { 1: 1 };
    this.wait4 = {};
}

Wasm32Kernel.prototype.get_port = function ()
{
    var channel = new MessageChannel();

    channel.port1.onmessage = event => {
        this.message(channel.port1, event.data);
    };

    if (this.ports_by_pid[1] === undefined) {
        this.ports_by_pid[1] = channel.port1;
        this.pids_by_port.set(channel.port1, 1);
        this.ppids[1] = 1;
    }

    return [channel.port2, channel.port1];
};

Wasm32Kernel.prototype.message = function (port, data)
{
    var req = data[0];
    var seq = data[1];

    if (data[0] === "kill") {
        var pid = data[1];
        var signal = data[2];

        this.ports_by_pid[pid].postMessage(["kill", signal]);
    } else if (data[0] === "fork") {
        var pid = this.space_pids.alloc(1);
        var [nport, tport] = this.get_port();

        this.ports_by_pid[pid] = tport;
        this.pids_by_port.set(tport, pid);
        this.ppids[pid] = this.pids_by_port.get(port);

        //console.log("assigned pid " + pid + " " + nport);
        port.postMessage(["response", seq, [pid, nport]], [nport]);
    } else if (data[0] === "exit") {
        var exitcode = data[2];
        var pid = this.pids_by_port.get(port);
        var ppid = this.ppids[pid];
        var pport = this.ports_by_pid[ppid];

        this.ports_by_pid[ppid].postMessage(["response", this.wait4[ppid], [pid, exitcode]]);
    } else if (data[0] === "wait4") {
        var pid = this.pids_by_port.get(port);
        this.wait4[pid] = seq;
    } else {
        console.log(data);
        throw "unknown message!";
    }
};

function Wasm32System(port)
{
    this.processes = [];
    this.threads = [];
    this.runqueue = [];
    if (port)
        this.port = port;
}

Wasm32System.prototype.init_sp = function (vm, off, args, env)
{
    var HEAP8 = vm.HEAP8;
    var HEAP32 = vm.HEAP32;
    var i;
    var eo = [];
    var ao = [];
    for (i = env.length-1; i >= 0; i--) {
        var str = env[i];
        off -= str.length+1;
        CStringTo(str, HEAP8, off);
        eo.push(off);
    }
    for (i = args.length-1; i >= 0; i--) {
        var str = args[i];
        off -= str.length+1;
        CStringTo(str, HEAP8, off);
        ao.push(off);
    }
    off &= -8;

    HEAP32[(off-=4)>>2] = 0;

    for (i = 0; i < eo.length; i++) {
        HEAP32[(off-=4)>>2] = eo[i];
    }

    var envp = off;

    HEAP32[(off-=4)>>2] = 0;

    for (i = 0; i < ao.length; i++) {
        HEAP32[(off-=4)>>2] = ao[i];
    }

    var argv = off;
    var argc = ao.length;

    off &= -16;

    HEAP32[(off-=4)>>2] = 0; /* padding */
    HEAP32[(off-=4)>>2] = envp;
    HEAP32[(off-=4)>>2] = argv;
    HEAP32[(off-=4)>>2] = argc;

    HEAP32[(off-=4)>>2] = 3; /* argument count */
    off -= 4;
    HEAP32[off>>2] = off+48; /* argument something */
    HEAP32[(off-=4)>>2] = 0; /* return FP */
    HEAP32[(off-=4)>>2] = 0; /* return PC */

    if (off & 4) {
        throw "unaligned off";
    }

    return off;
};

function remote_process(kernel, arraybuffer)
{
    var [kport, kport2] = kernel.get_port();
    kport.start();
    kport2.start();

    var mchs = [new MessageChannel(), new MessageChannel(), new MessageChannel(), new MessageChannel(), new MessageChannel(), new MessageChannel()];
    var lports = mchs.map(x => x.port1);
    var rports = mchs.map(x => x.port2);

    var worker = new Worker("wasm32-worker.js");

    lports[5].onmessage = function (event) {
        document.getElementById("debug").innerHTML = event.data;
    };

    return new Promise((resolve, reject) => {
        worker.onmessage = () => resolve(lports);
        worker.postMessage([kport, arraybuffer].concat(rports), [kport, arraybuffer].concat(rports));
    })
}

function abtoascii(ab)
{
    let h8 = new Uint8Array(ab);
    let s = "";

    for (var i = 0; i < h8.byteLength; i++) {
        let c = h8[i];

        if (c >= 0x80)
            throw "non-ASCII byte";

        s += String.fromCharCode(h8[i]);
    }

    return s;
}

Wasm32System.prototype.instantiate = function (module, vm, args, env)
{
    var process;
    var thread;
    if (!this.threads.length) {
        process = new Wasm32Process(this);
        thread = new Wasm32Thread(undefined, process, 8192);
        return module.load(thread, vm).then(() => {
            var ret = module.instantiate(thread, vm, 0x4000, true);
            var tos = (module.dyninfo.data_end + 4095) & -4096;

            vm.%{zp[&zeropage::top_of_sbrk] = "tos"}

            return ret;
        }).then(() => {
            process.HEAP8 = vm.HEAP8;
            process.HEAP16 = vm.HEAP16;
            process.HEAP32 = vm.HEAP32;
            process.HEAPU8 = vm.HEAPU8;
            process.HEAPU16 = vm.HEAPU16;
            process.HEAPU32 = vm.HEAPU32;
            process.HEAPF32 = vm.HEAPF32;
            process.HEAPF64 = vm.HEAPF64;

            thread.heap = vm.heap;
            thread.HEAP8 = vm.HEAP8;
            thread.HEAP16 = vm.HEAP16;
            thread.HEAP32 = vm.HEAP32;
            thread.HEAPU8 = vm.HEAPU8;
            thread.HEAPU16 = vm.HEAPU16;
            thread.HEAPU32 = vm.HEAPU32;
            thread.HEAPF32 = vm.HEAPF32;
            thread.HEAPF64 = vm.HEAPF32;

            var HEAP32 = vm.HEAP32;

            %{zp[&zeropage::top_of_memory] = "module.top_of_memory"}
            %{zp[&zeropage::thread_list]} = %{tp1};
            %{zp[&zeropage::bottom_of_sbrk] = "module.start_of_sbrk"}

            %{tp1[&threadpage::next]} = %{tp1};
            %{tp1[&threadpage::prev]} = %{tp1};
            %{tp1[&threadpage::id] = "1"}
            %{tp1[&threadpage::bottom_of_stack] = "module.bottom_of_stack"}
            %{tp1[&threadpage::top_of_stack] = "module.top_of_stack"}

            module.top_of_stack = module.sizes.stackbottom + module.sizes.stacksize;
            var sp = this.init_sp(vm, module.top_of_stack, args, env);
            %{tp1[&threadpage::sp] = "sp"}
            %{tp1[&threadpage::initsp] = "sp"}

            %{tp1[&threadpage::pc] = "process.entry"}
            if (false && typeof document !== "undefined") {
                new ThinThinFD(process, 0);
                new VT100FD(process, document.getElementById("output2"), 1, 0);
                new ThinThinFD(process, 2);
            } else if (typeof document !== "undefined") {
                new HTMLFD(process, undefined, 0);
                new ThinThinFD(process, 1);
                new ThinThinFD(process, 2);

                ////console.log('restarting');

                // let first = true;

                // process.fds[0].inputPromise = function () {
                //     if (first) {
                //         first = false;
                //         return new Promise((resolve,reject) => {
                //             var content = document.getElementById("dot-input").innerHTML;
                //             //console.log(content);
                //             resolve(content);
                //         });
                //     } else {
                //         //console.log("EOF");
                //         return Promise.resolve("");
                //     }
                // };

                // outstr = "";
            } else {
                new ThinThinFD(process, 0);
                new ThinThinFD(process, 1);
                new ThinThinFD(process, 2);
            }
            this.runqueue.push(thread);
        });
    } else {
        process = this.processes[0];
        thread = this.threads[0];
    }
    %{tp1[&threadpage::pc] = "process.entry"}
    if (false && typeof document !== "undefined") {
        new ThinThinFD(process, 0);
        new VT100FD(process, document.getElementById("output2"), 1, 0);
        new ThinThinFD(process, 2);
    } else if (typeof document !== "undefined") {
        new HTMLFD(process, undefined, 0);
        new ThinThinFD(process, 1);
        new ThinThinFD(process, 2);

        ////console.log('restarting');

        // let first = true;

        // process.fds[0].inputPromise = function () {
        //     if (first) {
        //         first = false;
        //         return new Promise((resolve,reject) => {
        //             var content = document.getElementById("dot-input").innerHTML;
        //             //console.log(content);
        //             resolve(content);
        //         });
        //     } else {
        //         //console.log("EOF");
        //         return Promise.resolve("");
        //     }
        // };

        // outstr = "";
    } else {
        new ThinThinFD(process, 0);
        new ThinThinFD(process, 1);
        new ThinThinFD(process, 2);
    }
    this.runqueue.push(thread);
};

Wasm32System.prototype.step = function ()
{
    if (this.runqueue.length == 0)
        return;

    var thread = this.runqueue.shift();

    thread.step();

    if (!thread.stopped())
        this.runqueue.push(thread);
};
